%% Label prepare
% Script for importing data from the following text file:
%
%  /Users/apple/Desktop/AI_pro/Gene_Chip_Data/E-TABM-185.sdrf.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/12/25 14:14:48

%% Initialize variables.
filename = '/Users/apple/Desktop/AI_pro/Gene_Chip_Data/E-TABM-185.sdrf.txt';
delimiter = '\t';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,12,15,16,17,18,20,21,23]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,12,15,16,17,18,20,21,23]);
rawCellColumns = raw(:, [2,3,4,5,6,7,8,9,10,11,13,14,19,22,24,25,26,27,28,29,30]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
ETABM185 = table;
ETABM185.SourceName = cell2mat(rawNumericColumns(:, 1));
ETABM185.MaterialType = rawCellColumns(:, 1);
ETABM185.CharacteristicsBioSourceType = rawCellColumns(:, 2);
ETABM185.CharacteristicsCellLine = rawCellColumns(:, 3);
ETABM185.CharacteristicsCellType = rawCellColumns(:, 4);
ETABM185.CharacteristicsDevelopmentalStage = rawCellColumns(:, 5);
ETABM185.CharacteristicsDiseaseStage = rawCellColumns(:, 6);
ETABM185.CharacteristicsDiseaseState = rawCellColumns(:, 7);
ETABM185.CharacteristicsOrganismPart = rawCellColumns(:, 8);
ETABM185.CharacteristicsOrganism = rawCellColumns(:, 9);
ETABM185.CharacteristicsSex = rawCellColumns(:, 10);
ETABM185.LabeledExtractName = cell2mat(rawNumericColumns(:, 2));
ETABM185.MaterialType1 = rawCellColumns(:, 11);
ETABM185.Label = rawCellColumns(:, 12);
ETABM185.HybridizationName = cell2mat(rawNumericColumns(:, 3));
ETABM185.ArrayDesignREF = cell2mat(rawNumericColumns(:, 4));
ETABM185.ScanName = cell2mat(rawNumericColumns(:, 5));
ETABM185.ArrayDataFile = cell2mat(rawNumericColumns(:, 6));
ETABM185.CommentArrayExpressFTPfile = rawCellColumns(:, 13);
ETABM185.ProtocolREF = cell2mat(rawNumericColumns(:, 7));
ETABM185.NormalizationName = cell2mat(rawNumericColumns(:, 8));
ETABM185.CommentNormalizationType = rawCellColumns(:, 14);
ETABM185.DerivedArrayDataMatrixFile = cell2mat(rawNumericColumns(:, 9));
ETABM185.CommentDerivedArrayExpressFTPfile = rawCellColumns(:, 15);
ETABM185.FactorValueCELLLINE = rawCellColumns(:, 16);
ETABM185.FactorValueCELLTYPE = rawCellColumns(:, 17);
ETABM185.FactorValueDEVELOPMENTALSTAGE = rawCellColumns(:, 18);
ETABM185.FactorValueDISEASESTAGE = rawCellColumns(:, 19);
ETABM185.FactorValueDISEASESTATE = rawCellColumns(:, 20);
ETABM185.FactorValueORGANISMPART = rawCellColumns(:, 21);

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

fprintf('E-TABM-185.sdrf.txt patched! \n');